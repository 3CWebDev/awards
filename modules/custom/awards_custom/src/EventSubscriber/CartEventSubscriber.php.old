<?php

namespace Drupal\awards_custom\EventSubscriber;

use Drupal\commerce_cart\Event\CartEntityAddEvent;
use Drupal\commerce_cart\EventSubscriber\CartEventSubscriber as BaseCartEventSubscriber;
use Drupal\Core\StringTranslation\StringTranslationTrait;
use Drupal\Core\StringTranslation\TranslationInterface;
use Drupal\Core\Link;
use Symfony\Component\HttpFoundation\RedirectResponse;

class CartEventSubscriber extends BaseCartEventSubscriber {


  public function displayAddToCartMessage(CartEntityAddEvent $event) {
     /*
    // Load product variation
    /*
        [0] => __construct
        [1] => getCart
        [2] => getEntity
        [3] => getQuantity
        [4] => getOrderItem
        [5] => isPropagationStopped
        [6] => stopPropagation

        dpm(get_class_methods($event));
     */

    // $qty = $event->getQuantity();

    // Load base product to prepend its title to the add-to-cart message
    $purchased_entity = $event->getEntity();
    $product_id = $purchased_entity->product_id->getString();
    $product = \Drupal\commerce_product\Entity\Product::load($product_id);
    $custom = FALSE;

    /* Check if cart item contains custom text option and, if so, has the text been entered?*/
    if (isset($product->field_number_of_lines)){
      $number_of_lines = $product->field_number_of_lines->getString();
      if (is_numeric($number_of_lines)){
        $order_item = $event->getOrderItem();
        $custom_text_entered = $order_item->field_custom_text_entered->getString();
        if ($custom_text_entered != 1){
          // Redirect to custom text form page
          drupal_set_message($this->t('@entity requires engraving customzation.', [
              '@entity' => $product->title->getString() . ' ' . $purchased_entity->label(),
          ]), 'warning');
          $custom = TRUE;
          //$path = '/product/' . $product_id . '/' . $order_item->id() . '/custom_text';
          //$response = new RedirectResponse($path);
          //$response->send();

        }
      }
    }

    if (!$custom){
      drupal_set_message($this->t('@entity added to @cart-link.', [
          '@entity' => $product->title->getString() . ' ' . $purchased_entity->label(),
          '@cart-link' => Link::createFromRoute($this->t('your cart', [], ['context' => 'cart link']), 'commerce_cart.page')->toString(),
      ]));
    }

  }
}